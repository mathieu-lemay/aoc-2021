#! /usr/bin/python
from unittest.mock import ANY


def parse(input_):
    t = 0
    for idx, c in enumerate(input_):
        if c == "," and t == 1:
            i = idx
            break
        elif c == "[":
            t += 1
        elif c == "]":
            t -= 1
    else:
        raise Exception(f"Error splitting {input_}")

    x = input_[1:i]
    y = input_[i + 1: -1]

    if "," in x:
        x = parse(x)
    else:
        x = int(x)

    if "," in y:
        y = parse(y)
    else:
        y = int(y)

    return [x, y]


def propagate(expr, left, right):
    if left is None and right is None:
        return None, None

    if left:
        if isinstance(expr[1], int):
            expr[1] += left
            left = None
        elif isinstance(expr[0], int):
            expr[0] += left
            left = None
        else:
            left, right = propagate(expr[0], left, None)

    if right:
        if isinstance(expr[0], int):
            expr[0] += right
            right = None
        elif isinstance(expr[1], int):
            expr[1] += right
            right = None
        else:
            left, right = propagate(expr[1], right, None)

    return left, right


def explode(expr, level=0):
    x, y = expr
    left = right = None
    llvl = rlvl = 99
    exploded = False

    if level >= 4:
        return None, (x, level), (y, level), True

    if not exploded:
        if isinstance(x, list):
            x, (left, llvl), (right, rlvl), exploded = explode(x, level + 1)
            if isinstance(y, int) and right:
                expr[1] += right
                right = None
        elif isinstance(y, list):
            y, (left, llvl), (right, rlvl), exploded = explode(y, level + 1)
            if isinstance(x, int) and left:
                expr[0] += left
                left = None

        if x is not None and left and isinstance(expr[1], list):  # and llvl > level + 2:
            left, _ = propagate(expr[1], left, None)

        if y is not None and right and isinstance(expr[0], list):  # and rlvl > level + 2:
            _, right = propagate(expr[0], None, right)

        if x is None:
            expr[0] = 0

        if y is None:
            expr[1] = 0

    return expr, (left, llvl), (right, rlvl), exploded


def reduce(expr):
    pass


class Test:
    def test_parse(self):
        assert parse("[1,2]") == [1, 2]
        assert parse("[[1,2],3]") == [[1, 2], 3]
        assert parse("[9,[8,7]]") == [9, [8, 7]]
        assert parse("[[1,9],[8,5]]") == [[1, 9], [8, 5]]
        assert parse("[[[[1,2],[3,4]],[[5,6],[7,8]]],9]") == [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 9]
        assert parse("[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]") == [[[9, [3, 8]], [[0, 9], 6]], [[[3, 7], [4, 9]], 3]]
        assert parse("[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]") == [
            [[[1, 3], [5, 3]], [[1, 3], [8, 7]]],
            [[[4, 9], [6, 9]], [[8, 2], [7, 3]]],
        ]

    def test_explode(self):
        assert explode([[[[[9, 8], 1], 2], 3], 4]) == ([[[[0, 9], 2], 3], 4], ANY, ANY, True)
        assert explode([7, [6, [5, [4, [3, 2]]]]]) == ([7, [6, [5, [7, 0]]]], ANY, ANY, True)
        assert explode([[6, [5, [4, [3, 2]]]], 1]) == ([[6, [5, [7, 0]]], 3], ANY, ANY, True)
        assert explode([[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]) == ([[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]], ANY, ANY, True)
        # assert explode([[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]) == ([[3,[2,[8,0]]],[9,[5,[7,0]]]], ANY, ANY, True)

    def test_reduce(self):
        # expr = [[[[4, 3], 4], 4], [7, [[8, 4], 9]], [1, 1]]
        # assert reduce(expr) == [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]
        assert True
